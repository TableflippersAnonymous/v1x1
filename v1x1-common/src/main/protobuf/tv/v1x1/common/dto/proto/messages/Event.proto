syntax = "proto2";

package tv.v1x1.common.dto.proto.messages;

import "Message.proto";
import "ChatMessage.proto";
import "Channel.proto";
import "User.proto";
import "IRC.proto";
import "Bot.proto";
import "Platform.proto";
import "Module.proto";
import "UUID.proto";

message Event {
    enum EventType {
        UNKNOWN = 0;
        CHAT_MESSAGE = 1;
        CHAT_JOIN = 2;
        CHAT_PART = 3;
        TWITCH_BOT_CHANNEL_STATE = 4;
        TWITCH_BOT_CONNECTED = 5;
        TWITCH_BOT_GLOBAL_STATE = 6;
        TWITCH_CHANNEL_EVENT = 7;
        TWITCH_CHANNEL_USERS = 8;
        TWITCH_HOST = 9;
        TWITCH_PING = 10;
        TWITCH_RAW_MESSAGE = 11;
        TWITCH_RECONNECT = 12;
        TWITCH_ROOM_STATE = 13;
        TWITCH_TIMEOUT = 14;
        TWITCH_USER = 15;
        TWITCH_USER_MOD_CHANGE = 16;
        SCHEDULER_NOTIFY = 17;
    };

    extensions 100 to max; /* Convention is to use the same 100 + your EventType ID */

    extend Message {
        optional Event data = 101;
    }

    required EventType type = 1;
}

message ChatMessageEvent {
    extensions 100 to max;

    extend Event {
        optional ChatMessageEvent data = 101;
    }

    required core.ChatMessage chat_message = 1;
    required core.Platform type = 2;
}

message ChatJoinEvent {
    extensions 100 to max;

    extend Event {
        optional ChatJoinEvent data = 102;
    }

    required core.User user = 1;
    required core.Channel channel = 2;
    required core.Platform type = 3;
}

message ChatPartEvent {
    extensions 100 to max;

    extend Event {
        optional ChatPartEvent data = 103;
    }

    required core.User user = 1;
    required core.Channel channel = 2;
    required core.Platform type = 3;
}

message TwitchBotChannelStateEvent {
    extend Event {
        optional TwitchBotChannelStateEvent data = 104;
    }

    required core.Channel channel = 1;
    required core.Bot bot = 2;
    required core.IrcStanza user_state_command = 3;
}

message TwitchBotConnectedEvent {
    extend Event {
        optional TwitchBotConnectedEvent data = 105;
    }

    required core.Bot bot = 1;
    required core.IrcStanza rpl_end_of_motd_command = 2;
}

message TwitchBotGlobalStateEvent {
    extend Event {
        optional TwitchBotGlobalStateEvent data = 106;
    }

    required core.Bot bot = 1;
    required core.IrcStanza global_user_state_command = 2;
}

message TwitchChannelEvent {
    extend Event {
        optional TwitchChannelEvent data = 107;
    }

    required core.Channel channel = 1;
    required string message = 2;
    required core.IrcStanza notice_command = 3;
}

message TwitchChannelUsersEvent {
    extend Event {
        optional TwitchChannelUsersEvent data = 108;
    }

    required core.Channel channel = 1;
    repeated core.User users = 2;
    required core.IrcStanza rpl_name_reply_command = 3;
}

message TwitchChatJoinEvent {
    extend ChatJoinEvent {
        optional TwitchChatJoinEvent data = 101;
    }

    required core.IrcStanza join_command = 1;
}

message TwitchChatMessageEvent {
    extend ChatMessageEvent {
        optional TwitchChatMessageEvent data = 101;
    }

    required core.IrcStanza privmsg_command = 1;
}

message TwitchChatPartEvent {
    extend ChatPartEvent {
        optional TwitchChatPartEvent data = 101;
    }

    required core.IrcStanza part_command = 1;
}

message TwitchHostEvent {
    extend Event {
        optional TwitchHostEvent data = 109;
    }

    required core.Channel channel = 1;
    optional core.Channel target_channel = 2;
    required core.IrcStanza host_target_command = 3;
}

message TwitchPingEvent {
    extend Event {
        optional TwitchPingEvent data = 110;
    }

    required string token = 1;
    required core.IrcStanza ping_command = 2;
}

message TwitchRawMessageEvent {
    extend Event {
        optional TwitchRawMessageEvent data = 111;
    }

    required core.Bot bot = 1;
    required core.IrcStanza irc_stanza = 2;
}

message TwitchReconnectEvent {
    extend Event {
        optional TwitchReconnectEvent data = 112;
    }

    required core.Bot bot = 1;
    required core.IrcStanza reconnect_command = 2;
}

message TwitchRoomStateEvent {
    extend Event {
        optional TwitchRoomStateEvent data = 113;
    }

    required core.Channel channel = 1;
    required core.IrcStanza room_state_command = 2;
}

message TwitchTimeoutEvent {
    extend Event {
        optional TwitchTimeoutEvent data = 114;
    }

    required core.Channel channel = 1;
    required core.User user = 2;
    required core.IrcStanza clear_chat_command = 3;
}

message TwitchUserEvent {
    extend Event {
        optional TwitchUserEvent data = 115;
    }

    required core.Channel channel = 1;
    required core.User user = 2;
    required string message = 3;
    required core.IrcStanza user_notice_command = 4;
}

message TwitchUserModChangeEvent {
    extend Event {
        optional TwitchUserModChangeEvent data = 116;
    }

    required core.Channel channel = 1;
    required core.User user = 2;
    required bool is_now_mod = 3;
    required core.IrcStanza mode_command = 4;
}

message SchedulerNotifyEvent {
    extend Event {
        optional SchedulerNotifyEvent data = 117;
    }

    required core.Module module = 1;
    required core.UUID id = 2;
    required bytes payload = 3;
}