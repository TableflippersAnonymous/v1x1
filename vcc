#!/usr/bin/env bash
getBoolAnswer() {
  while true; do
   read -p "$@ [y/n] " -n1
   printf "\n" >&2
   REPLY=$(echo $REPLY|tr [A-Z] [a-z])
   if [ $REPLY == "y" -o $REPLY == "n" ]; then
      echo $REPLY
      return
    fi
  done
}

function yaml2json() {
  ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' $*
}

function start() {
  echo "Starting services..."
  docker-compose up -d $@
}

function stop() {
  echo "Stopping services..."
  docker-compose stop $@
  docker-compose rm -f $@
}

function clean() {
  for module in $@; do
    targets="v1x1-$module "
  done
  docker rmi $targets
}

function cleanAll() {
  docker-compose down
  clean $MODULES
}

function buildOne() {
  local target=v1x1-modules/v1x1-modules-$2/v1x1-modules-$2-$1
  V1X1_MAKE_TARGET="-pl v1x1-common,$target" V1X1_MAKE_ENV=dev make mvn-clean mvn-package
  return $?
}

function buildAll() {
  V1X1_MAKE_ENV=dev make mvn-clean mvn-package
  return $?
}

function followLogs() {
  docker-compose logs -f $@
}

function usage() {
  echo "Usage: $0 <help|subcmd> [args]"
}

function help() {
  cat <<EOM
$(usage)

Control the v1x1 dev environment

    start [service[,service2...]]   - start a service. Default: all of them
    status                          - alias to docker-compose ps
    logs [service[,service2...]]    - follow logs for a service. Default: all of them
    restart [service[,service2...]] - runs stop, then start
    stop [service][,service2...]]   - stop a service. Default: all of them
    build [service [type]]          - build a service; type is core/channel/global. Default: channel
    cqlsh                           - gives you a cql prompt on your Cassandra container
    rediscli                        - gives you a redis-cli prompt on your Redis container
    encode [string]                 - encodes strings into a C* blob
    help                            - new command, what dis
EOM
}

function checkCoreServices() {
  if [ $(docker-compose ps|egrep 'v1x1_(cass|zoo|redis)_1'|wc -l) = 3 ]; then
    echo "online"
  else
    echo "offline"
  fi
}

function cmdBuild() {
  if [ $# -eq 0 ]; then
    if [ "$(getBoolAnswer "Stop and rebuild the entire dev environment?")" == "n" ]; then
      echo "Aborting..."
      exit 2
    fi
    cleanAll
    buildAll
    if [ $? -gt 0 ]; then
        echo "Build failed :["
        exit 1
    fi
    if [ "$(getBoolAnswer "Start new dev environment?")" == "y" ]; then
      cmdStart
    else
      echo "Okay! Bye!"
    fi
  else
    if [ $# -eq 1 ]; then
      TYPE=channel
    else
      TYPE=$2
    fi
    stop $1
    clean v1x1-common $1
    buildOne $1 $TYPE
    if [ $? -gt 0 ]; then
        echo "Build failed :["
        exit 1
    fi
    start $1
  fi
}

function cmdStart() {
  if [ $# -eq 0 ]; then
    if [ "$(checkCoreServices)" == "offline" ]; then
      start cass redis zoo
      echo "Waiting for core services to start..."
      sleep 45
    fi
    echo "Core services online..."
  fi
  start $@
}

function cmdStop() {
  if [ $# -eq 0 ]; then
    if [ "$(getBoolAnswer "Stop the entire dev environment?")" == "n" ]; then
      echo "Aborting..."
      exit 2
    fi
  fi
  stop $@
}

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

function cmdLogs() {
  followLogs $@
}

function cmdCqlsh() {
  local ID=$(docker ps -qf name=v1x1_cass_1 2> /dev/null)
  if [ "x$ID" == "x" ]; then
    echo "Cassandra container doesn't seem to be running"
  else
    docker exec -it v1x1_cass_1 cqlsh
    exit $?
  fi
}

function cmdRediscli() {
  local ID=$(docker ps -qf name=v1x1_redis_1 2> /dev/null)
  if [ "x$ID" == "x" ]; then
    echo "Redis container doesn't seem to be running"
  else
    docker exec -it v1x1_redis_1 redis-cli
    exit $?
  fi
}

function cmdEncode() {
  echo -n "0x"
  echo -n "$@" | xxd -ps | xargs | sed -r 's/ //g'
}

echo "Finding services..."
while read module; do
  MODULES="$MODULES $module"
done < <(yaml2json docker-compose.yml|jq -r '.services|keys|.[]' )

CMD=$(echo -n $1|tr [A-Z] [a-z])
shift 1
if [ $# -eq 0 ]; then
  ARGS=$MODULES
else
  ARGS=$@
fi
export COMPOSE_HTTP_TIMEOUT=120
case $CMD in
  start)
    cmdStart $@
    ;;
  stop)
    cmdStop $@
    ;;
  restart)
    cmdStop $@
    cmdStart $@
    ;;
  status)
    docker-compose ps
    ;;
  build)
    cmdBuild $@
    ;;
  cqlsh)
    cmdCqlsh $@
    ;;
  rediscli)
    cmdRediscli $@
    ;;
  logs)
    cmdLogs $@
    ;;
  encode)
    cmdEncode $@
    ;;
  help)
    help
    ;;
  *)
    usage
    ;;
esac
exit 0
